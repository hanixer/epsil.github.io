title: Running Bash scripts on Windows
date: 2016-04-20
lang: en
description: How to run Bash scripts from Windows' command prompt and extend it with common Unix commands.
css: custom.css
---

The following setup allows us to [run Bash scripts from Windows' command prompt](#usage). It also augments the command prompt with common Unix commands like `ls`, `cp` and `rm`, which is useful if these are ingrained into muscle memory.

(For a list of standalone Bash shells for Windows, see [alternatives](#alternatives).)

Usage
-----

The minimum requirement is to [install MSYS](#msys). We can then open a command prompt window and run a Bash script as follows:

    sh script.sh

If the script accepts parameters, we just provide them at the end:

    sh script.sh --param1 val1 --param2 val2

Below follow installation instructions for [MSYS](#msys), [MinGW](#mingw) and [G*nu*W*in*32](#gnuwin32).

[MSYS](http://www.mingw.org/wiki/msys)
--------------------------------------

Install [MSYS](http://www.mingw.org/wiki/msys). Ensure that `sh.exe` is globally available by *appending* the location of MSYS' executables (its `bin/` directory) to the `PATH` environment variable.

To access the `PATH` variable, go to *Control Panel* -> *System* -> *Advanced* -> *Environment Variables*. The value is a list of file paths separated by `;`, for example:

    %SystemRoot%\system32;%SystemRoot%;C:\Ruby22\bin

Thus, if MSYS' executables are located in `C:\msys\1.0\bin`, simply add `;C:\msys\1.0\bin` to the end:

    %SystemRoot%\system32;%SystemRoot%;C:\Ruby22\bin;C:\msys\1.0\bin

We can now run Bash scripts as shown [above](#usage), as well as use common Unix commands like `ls`, `cp` and `rm`.

[MinGW](http://www.mingw.org/)
------------------------------

For additional developer tools, augment the above setup with a complete installation of [MinGW](http://www.mingw.org/). Append its directory to `PATH` *after* MSYS.

We can now link (`ld`) and compile C programs (`gcc`) and C++ programs (`g++`).

[G*nu*W*in*32](http://gnuwin32.sourceforge.net/)
------------------------------------------------

For even more Unix utilities, install [G*nu*W*in*32](http://gnuwin32.sourceforge.net/). Append its directory to `PATH` *after* MSYS and MinGW.

We now have a host of tools at our command. For example, `wget` downloads a file via the command prompt, while `md5sum` calculates its MD5 hash.

Alias `open`
------------

Windows does not have the `open` command, and none of the packages above provide it. To alias `open` to Windows' `start` command, navigate to MSYS' `bin/` directory and create an `open.bat` file containing the following:

    @echo off
    start %*

Alias `find`
------------

Windows' own `find` utility shadows the Unix `find` command. To create an alias for the latter, navigate to MSYS' `bin/` directory and make a copy of `find.exe` called `find2.exe`. The Unix command can now be accessed as `find2`.

Alternatives
------------

Windows 10 includes its own [Linux Bash Shell](http://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/), based on Ubuntu. Note that this is a *standalone* shell, and does not interfere with Windows' command prompt. A standalone shell has the advantage that it may provide functionality that is unavailable or shadowed by the command prompt.

Another comprehensive standalone shell is provided by the [Cygwin](http://www.cygwin.com/) project, which can be used on older Windows versions. MSYS and MinGW also include standalone shells, and [Git for Windows](https://git-scm.com/download/win) provides a "Git Bash" shell.
